"""Test integracji API po wdro≈ºeniu optymalizacji comparatora."""
import sys
import asyncio
from pathlib import Path

# Test import√≥w
print("=" * 70)
print("üß™ TEST INTEGRACJI API - Po wdro≈ºeniu optymalizacji")
print("=" * 70)

print("\nüì¶ KROK 1: Weryfikacja import√≥w modu≈Ç√≥w...")

try:
    from models import (
        UploadResponse, ProcessRequest, ProcessResponse, ProcessingStatus,
        FullDocumentResult, ModifiedSentencesResult, AddedSentencesResult,
        DeletedSentencesResult
    )
    print("  ‚úÖ models.py")
except Exception as e:
    print(f"  ‚ùå models.py - ERROR: {e}")
    sys.exit(1)

try:
    from extractor import DocumentExtractor
    print("  ‚úÖ extractor.py")
except Exception as e:
    print(f"  ‚ùå extractor.py - ERROR: {e}")
    sys.exit(1)

try:
    from comparator import DocumentComparator
    print("  ‚úÖ comparator.py (ZOPTYMALIZOWANA WERSJA)")
except Exception as e:
    print(f"  ‚ùå comparator.py - ERROR: {e}")
    sys.exit(1)

try:
    from storage import storage
    print("  ‚úÖ storage.py")
except Exception as e:
    print(f"  ‚ùå storage.py - ERROR: {e}")
    sys.exit(1)

try:
    from main import app
    print("  ‚úÖ main.py (FastAPI app)")
except Exception as e:
    print(f"  ‚ùå main.py - ERROR: {e}")
    sys.exit(1)

# Test funkcjonalno≈õci
print("\nüì¶ KROK 2: Weryfikacja funkcjonalno≈õci kluczowych klas...")

try:
    extractor = DocumentExtractor()
    print("  ‚úÖ DocumentExtractor - instancja utworzona")
except Exception as e:
    print(f"  ‚ùå DocumentExtractor - ERROR: {e}")
    sys.exit(1)

try:
    comparator = DocumentComparator()
    print("  ‚úÖ DocumentComparator - instancja utworzona")

    # Sprawd≈∫ optymalizacje
    has_cache = hasattr(comparator, '_diff_cache')
    has_whitespace = hasattr(comparator, '_normalize_whitespace')

    print(f"     ‚Ä¢ Cache enabled: {has_cache}")
    print(f"     ‚Ä¢ Whitespace normalization: {has_whitespace}")

    if not has_cache or not has_whitespace:
        print("  ‚ö†Ô∏è  UWAGA: Brakuje optymalizacji!")
        sys.exit(1)

except Exception as e:
    print(f"  ‚ùå DocumentComparator - ERROR: {e}")
    sys.exit(1)

# Test storage
print("\nüì¶ KROK 3: Weryfikacja storage...")

try:
    stats = storage.get_statistics()
    print("  ‚úÖ storage.get_statistics() dzia≈Ça")
    print(f"     ‚Ä¢ Total documents: {stats['total_documents']}")
    print(f"     ‚Ä¢ Total processes: {stats['total_processes']}")
    print(f"     ‚Ä¢ Completed: {stats['completed_processes']}")
    print(f"     ‚Ä¢ Processing: {stats['processing_count']}")
    print(f"     ‚Ä¢ Errors: {stats['error_count']}")
except Exception as e:
    print(f"  ‚ùå storage - ERROR: {e}")
    sys.exit(1)

# Test FastAPI app
print("\nüì¶ KROK 4: Weryfikacja FastAPI app...")

try:
    # Sprawd≈∫ dostƒôpne endpointy
    routes = [route.path for route in app.routes]
    expected_routes = [
        "/",
        "/health",
        "/api/documents/upload",
        "/api/process",
        "/api/status/{process_id}",
        "/api/result/{process_id}/full",
        "/api/result/{process_id}/modified",
        "/api/result/{process_id}/added",
        "/api/result/{process_id}/deleted"
    ]

    print("  ‚úÖ FastAPI app utworzona")
    print("     ‚Ä¢ Dostƒôpne endpointy:")

    for route in expected_routes:
        if route in routes:
            print(f"       ‚úÖ {route}")
        else:
            print(f"       ‚ùå {route} (BRAK!)")
            sys.exit(1)

except Exception as e:
    print(f"  ‚ùå FastAPI app - ERROR: {e}")
    sys.exit(1)

# Test kompatybilno≈õci comparatora
print("\nüì¶ KROK 5: Test kompatybilno≈õci comparatora z API...")

try:
    from extractor import ExtractedContent, TableStructure

    # Symulacja prostego por√≥wnania
    old_content = ExtractedContent(
        paragraphs=["Paragraf 1", "Paragraf 2"],
        tables=[],
        raw_text="Paragraf 1 Paragraf 2",
        metadata={}
    )

    new_content = ExtractedContent(
        paragraphs=["Paragraf 1", "Paragraf 2 zmodyfikowany"],
        tables=[],
        raw_text="Paragraf 1 Paragraf 2 zmodyfikowany",
        metadata={}
    )

    comparator = DocumentComparator()
    paragraphs, tables, statistics = comparator.compare_documents(old_content, new_content)

    print("  ‚úÖ DocumentComparator.compare_documents() dzia≈Ça")
    print(f"     ‚Ä¢ Zwr√≥cono paragraf√≥w: {len(paragraphs)}")
    print(f"     ‚Ä¢ Zwr√≥cono tabel: {len(tables)}")
    print(f"     ‚Ä¢ Statystyki:")
    print(f"       - Total paragraphs: {statistics.total_paragraphs}")
    print(f"       - Modified: {statistics.modified_paragraphs}")
    print(f"       - Total changes: {statistics.total_changes}")

    # Sprawd≈∫ typ zwracanego wyniku
    from models import ParagraphResult, TableResult, StatisticsResult

    if not all(isinstance(p, ParagraphResult) for p in paragraphs):
        print("  ‚ùå B≈ÇƒÖd: paragraphs nie sƒÖ typu ParagraphResult!")
        sys.exit(1)

    if not isinstance(statistics, StatisticsResult):
        print("  ‚ùå B≈ÇƒÖd: statistics nie jest typu StatisticsResult!")
        sys.exit(1)

    print("  ‚úÖ Typy zwracanych danych sƒÖ poprawne")

except Exception as e:
    print(f"  ‚ùå Test kompatybilno≈õci - ERROR: {e}")
    import traceback
    traceback.print_exc()
    sys.exit(1)

# Test normalizacji whitespace
print("\nüì¶ KROK 6: Test normalizacji whitespace...")

try:
    comparator = DocumentComparator()

    text1 = "To jest  tekst  z   wielokrotnymi    spacjami"
    text2 = "To jest tekst z wielokrotnymi spacjami"

    norm1 = comparator._normalize_whitespace(text1)
    norm2 = comparator._normalize_whitespace(text2)

    print(f"  ‚Ä¢ Tekst 1: '{text1}'")
    print(f"  ‚Ä¢ Tekst 2: '{text2}'")
    print(f"  ‚Ä¢ Znormalizowany 1: '{norm1}'")
    print(f"  ‚Ä¢ Znormalizowany 2: '{norm2}'")

    if norm1 == norm2:
        print("  ‚úÖ Normalizacja dzia≈Ça poprawnie - teksty sƒÖ identyczne")
    else:
        print("  ‚ùå B≈ÇƒÖd: teksty r√≥≈ºniƒÖ siƒô po normalizacji!")
        sys.exit(1)

except Exception as e:
    print(f"  ‚ùå Test normalizacji - ERROR: {e}")
    sys.exit(1)

# Podsumowanie
print("\n" + "=" * 70)
print("‚úÖ WSZYSTKIE TESTY INTEGRACJI PRZESZ≈ÅY POMY≈öLNIE!")
print("=" * 70)
print("\nüìä Podsumowanie:")
print("  ‚úÖ Wszystkie modu≈Çy importujƒÖ siƒô poprawnie")
print("  ‚úÖ DocumentComparator z optymalizacjami dzia≈Ça")
print("  ‚úÖ FastAPI app ma wszystkie wymagane endpointy")
print("  ‚úÖ Storage dzia≈Ça poprawnie")
print("  ‚úÖ Kompatybilno≈õƒá API zachowana (typy danych OK)")
print("  ‚úÖ Normalizacja whitespace aktywna")
print("\nüöÄ API gotowe do u≈ºycia w produkcji!")
print("=" * 70)
